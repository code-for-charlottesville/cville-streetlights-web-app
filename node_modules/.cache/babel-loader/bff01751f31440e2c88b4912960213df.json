{"ast":null,"code":"var _jsxFileName = \"/Users/rakshitakaulgud/Documents/react/streetlights/src/components/MainMap.js\";\nimport React, { Component } from 'react';\nimport { MapContainer, CircleMarker, TileLayer, Marker, Popup, GeoJSON, Tooltip, AttributionControl, Circle } from 'react-leaflet';\nimport streetlights from '../streetlights.json';\nimport combined from '../grid-combined.json';\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainMap extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.markerIcon = new L.Icon({\n      iconUrl: require(\"../resources/images/marker.png\"),\n      iconSize: [35, 45],\n      iconAnchor: [17, 46],\n      popupAnchor: [0, -46]\n    });\n\n    this.showPreview = place => {// show place's description\n    };\n\n    this.fixtureStyle = {\n      fillColor: \"red\",\n      fillOpacity: 1,\n      color: \"black\",\n      weight: 2\n    };\n\n    this.changeCountryColor = event => {\n      event.target.setStyle({\n        color: \"green\",\n        fillColor: this.state.color,\n        fillOpacity: 1\n      });\n    };\n\n    this.onEachCountry = (fixture, layer) => {\n      const lampCD = fixture.properties.LAMP_CD;\n      console.log(lampCD);\n      layer.bindPopup(lampCD);\n      layer.options.fillOpacity = 0.2; //0-1 (0.1, 0.2, 0.3)\n      // const colorIndex = Math.floor(Math.random() * this.colors.length);\n      // layer.options.fillColor = this.colors[colorIndex]; //0\n\n      layer.on({\n        click: this.changeCountryColor\n      });\n    };\n\n    this.state = {\n      lat: 38.0293,\n      lng: -78.4767,\n      zoom: 13,\n      data: []\n    };\n    this.geoJsonLayer = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    return this.props.streetlights ? /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [this.state.lat, this.state.lng],\n      zoom: this.state.zoom,\n      style: {\n        width: '200px',\n        height: '200px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AttributionControl, {\n        position: \"bottomright\",\n        prefix: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        style: this.fixtureStyle,\n        data: streetlights.features,\n        onEachFeature: this.onEachFixture\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MarkerClusterGroup, {\n        spiderfyDistanceMultiplier: 1,\n        showCoverageOnHover: false,\n        children: streetlights.features.map((dataItem, k) => {\n          //let { coordinates, company, url, loc } = dataItem;\n          let coordinates = dataItem.geometry.coordinates;\n          let fixtureStyle = dataItem.properties.FIXTURE_ST;\n\n          /*#__PURE__*/\n          _jsxDEV(Marker, {\n            center: [coordinates[0], coordinates[1]],\n            position: [coordinates[0], coordinates[1]],\n            icon: markerIcon,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              direction: \"right\",\n              offset: [-8, -2],\n              opacity: 1,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: fixtureStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this)\n          }, k, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this) : 'Data is loading...';\n  }\n\n}\n/*\n\n                {\n                this.props.streetlights['features'].map(streetlight => {\n                    const point = [streetlight['geometry']['coordinates'][1], streetlight['geometry']['coordinates'][0]]\n                    \n                    return (\n                        <Marker position={point} key={streetlight['properties']['GRID_ADDRE']} >\n                        \n                        </Marker>\n                    )\n                }) <GeoJSON style={this.fixtureStyle} ref={this.geoJsonLayer} data={streetlights.features} onEachFeature={this.onEachFixture}/>\n                \n                }\n\n                \n*/","map":{"version":3,"sources":["/Users/rakshitakaulgud/Documents/react/streetlights/src/components/MainMap.js"],"names":["React","Component","MapContainer","CircleMarker","TileLayer","Marker","Popup","GeoJSON","Tooltip","AttributionControl","Circle","streetlights","combined","MarkerClusterGroup","L","MainMap","constructor","props","context","markerIcon","Icon","iconUrl","require","iconSize","iconAnchor","popupAnchor","showPreview","place","fixtureStyle","fillColor","fillOpacity","color","weight","changeCountryColor","event","target","setStyle","state","onEachCountry","fixture","layer","lampCD","properties","LAMP_CD","console","log","bindPopup","options","on","click","lat","lng","zoom","data","geoJsonLayer","createRef","render","width","height","features","onEachFixture","map","dataItem","k","coordinates","geometry","FIXTURE_ST"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { MapContainer, CircleMarker, TileLayer, Marker, Popup, GeoJSON, Tooltip, AttributionControl, Circle  } from 'react-leaflet'\nimport streetlights from '../streetlights.json';\nimport combined from '../grid-combined.json';\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\nimport L from \"leaflet\";\nexport default class MainMap extends Component {\n\n    \n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            lat: 38.0293, \n            lng: -78.4767,\n            zoom: 13,\n            data: []\n        };\n        \n        this.geoJsonLayer = React.createRef();\n    }\n    markerIcon = new L.Icon({\n        iconUrl: require(\"../resources/images/marker.png\"),\n        iconSize: [35, 45],\n        iconAnchor: [17, 46],\n        popupAnchor: [0, -46]\n    });\n\n    showPreview = (place) => {\n        // show place's description\n    }\n    fixtureStyle = {\n        fillColor: \"red\",\n        fillOpacity: 1,\n        color: \"black\",\n        weight: 2,\n    };\n    changeCountryColor = (event) => {\n        event.target.setStyle({\n          color: \"green\",\n          fillColor: this.state.color,\n          fillOpacity: 1,\n        });\n    };\n\n    onEachCountry = (fixture, layer) => {\n        const lampCD = fixture.properties.LAMP_CD;\n        console.log(lampCD);\n        layer.bindPopup(lampCD);\n    \n        layer.options.fillOpacity = 0.2; //0-1 (0.1, 0.2, 0.3)\n        // const colorIndex = Math.floor(Math.random() * this.colors.length);\n        // layer.options.fillColor = this.colors[colorIndex]; //0\n    \n        layer.on({\n          click: this.changeCountryColor,\n        });\n    };\n    \n    render() {\n        return(\n            this.props.streetlights ?\n  \n            <MapContainer\n                   center={[this.state.lat, this.state.lng]} \n                   zoom={this.state.zoom} \n                   style={{ width: '200px', height: '200px'}}\n                >\n                <TileLayer\n                    url='https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png'\n                />\n                          <AttributionControl position=\"bottomright\" prefix={false} />\n                <GeoJSON style={this.fixtureStyle}  data={streetlights.features} onEachFeature={this.onEachFixture}/>\n                <MarkerClusterGroup\n                        spiderfyDistanceMultiplier={1}\n                        showCoverageOnHover={false}\n                >   \n                {\n                        streetlights.features.map((dataItem, k) => {\n                        //let { coordinates, company, url, loc } = dataItem;\n                        \n                            let coordinates = dataItem.geometry.coordinates;\n                            let fixtureStyle = dataItem.properties.FIXTURE_ST;\n                       \n                            <Marker\n                                key={k}\n                                center={[coordinates[0], coordinates[1]]}\n                                position={[coordinates[0], coordinates[1]]}\n                                icon = {markerIcon}\n                            >\n                            <Tooltip direction=\"right\" offset={[-8, -2]} opacity={1}>\n                                <span>{fixtureStyle}</span>\n                            </Tooltip>\n                            </Marker>\n                      \n                        })\n                }\n                </MarkerClusterGroup>\n               \n            </MapContainer>\n        :\n            'Data is loading...'\n        )\n    }\n\n}\n\n/*\n\n                {\n                this.props.streetlights['features'].map(streetlight => {\n                    const point = [streetlight['geometry']['coordinates'][1], streetlight['geometry']['coordinates'][0]]\n                    \n                    return (\n                        <Marker position={point} key={streetlight['properties']['GRID_ADDRE']} >\n                        \n                        </Marker>\n                    )\n                }) <GeoJSON style={this.fixtureStyle} ref={this.geoJsonLayer} data={streetlights.features} onEachFeature={this.onEachFixture}/>\n                \n                }\n\n                \n*/"]},"metadata":{},"sourceType":"module"}